# Canonical SDL for codegen. Keep in sync with docs/DEVELOPER_GUIDE.md

schema { query: Query, mutation: Mutation }

enum BasisEnum { CP AE }
enum LensEnum { ADMIN COFOG BENEFICIARY }

scalar JSON

"""
MVP+ (LEGO Builder) additions
"""

enum ScopeEnum { S13 CENTRAL }

type MissionWeight { code: String!, weight: Float! }
type LegoPiece { id: ID!, label: String!, description: String, type: String!, amountEur: Float, share: Float, missions: [MissionWeight!]!, beneficiaries: JSON!, examples: [String!]!, sources: [String!]!, locked: Boolean! }
type LegoBaseline { year: Int!, scope: ScopeEnum!, pib: Float!, depensesTotal: Float!, recettesTotal: Float!, pieces: [LegoPiece!]! }
type DistanceByPiece { id: ID!, shareDelta: Float! }
type Distance { score: Float!, byPiece: [DistanceByPiece!]! }

type MissionAllocation { code: String!, label: String!, amountEur: Float!, share: Float! }
type Allocation { mission: [MissionAllocation!]!, cofog: [MissionAllocation!], beneficiary: [MissionAllocation!] }

type Supplier { siren: String!, name: String! }
type ProcurementItem { supplier: Supplier!, amountEur: Float!, cpv: String, procedureType: String, locationCode: String, sourceUrl: String }

type Accounting {
  deficitPath: [Float!]!
  debtPath: [Float!]!
  commitmentsPath: [Float!]
  deficitDeltaPath: [Float!]
  debtDeltaPath: [Float!]
  baselineDeficitPath: [Float!]
  baselineDebtPath: [Float!]
  gdpPath: [Float!]
  deficitRatioPath: [Float!]
  baselineDeficitRatioPath: [Float!]
  debtRatioPath: [Float!]
  baselineDebtRatioPath: [Float!]
}
type Compliance { eu3pct: [String!]!, eu60pct: [String!]!, netExpenditure: [String!]!, localBalance: [String!]! }
type Macro { deltaGDP: [Float!]!, deltaEmployment: [Float!]!, deltaDeficit: [Float!]!, assumptions: JSON! }

type DecileImpact { d: Int!, deltaNetIncomePct: Float! }
type Distribution { decile: [DecileImpact!]!, giniDelta: Float!, povertyRateDeltaPp: Float!, assumptions: JSON! }

type Source { id: ID!, datasetName: String!, url: String!, license: String!, refreshCadence: String!, vintage: String! }

input RunScenarioInput { dsl: String!, lens: LensEnum }
type ShareSummary { title: String!, deficit: Float!, debtDeltaPct: Float, highlight: String, resolutionPct: Float, masses: JSON, eu3: String, eu60: String }
type RunScenarioPayload { id: ID!, scenarioId: ID!, accounting: Accounting!, compliance: Compliance!, macro: Macro!, distribution: Distribution, distanceScore: Float, shareSummary: ShareSummary, resolution: ResolutionType, warnings: [String!], dsl: String }

type ScenarioCompareResult {
  a: RunScenarioPayload!
  b: RunScenarioPayload
  waterfall: JSON!
  ribbons: JSON!
  pieceLabels: JSON!
  massLabels: JSON!
}

type EUCountryCofog { country: String!, code: String!, label: String!, amountEur: Float!, share: Float! }
type FiscalPath { years: [Int!]!, deficitRatio: [Float!]!, debtRatio: [Float!]! }

type MassTargetType {
  massId: String!
  targetDeltaEur: Float!
  specifiedDeltaEur: Float!
  cpTargetDeltaEur: Float
  cpSpecifiedDeltaEur: Float
  cpDeltaEur: Float
  unspecifiedCpDeltaEur: Float
}
type BuilderMassType { massId: String!, amountEur: Float!, share: Float! }

type ResolutionType { overallPct: Float!, byMass: [MassTargetType!]!, lens: LensEnum! }

enum PolicyFamilyEnum {
    PENSIONS
    TAXES
    TAX_EXPENDITURES
    HEALTH
    DEFENSE
    STAFFING
    SUBSIDIES
    CLIMATE
    SOCIAL_SECURITY
    PROCUREMENT
    OPERATIONS
    OTHER
}

type PolicyLeverType {
    id: ID!
    family: PolicyFamilyEnum!
    label: String!
    description: String
    paramsSchema: JSON!
    fixedImpactEur: Float
    feasibility: JSON!
    conflictsWith: [ID!]!
    sources: [String!]!
    shortLabel: String
    popularity: Float
    massMapping: JSON
    missionMapping: JSON
}

type MassLabelType {
    id: ID!
    displayLabel: String!
    description: String
    examples: [String!]!
    synonyms: [String!]!
    color: String
    icon: String
}

type MissionLabelType {
    id: ID!
    displayLabel: String!
    description: String
    examples: [String!]!
    synonyms: [String!]!
    color: String
    icon: String
}

type IntentType {
    id: ID!
    label: String!
    emoji: String
    massId: String!
    seed: JSON!
    popularity: Float!
    tags: [String!]!
}

type Query {
  allocation(year: Int!, basis: BasisEnum = CP, lens: LensEnum = ADMIN): Allocation!
  procurement(year: Int!, region: String!, cpvPrefix: String, procedureType: String, minAmountEur: Float, maxAmountEur: Float): [ProcurementItem!]!
  sources: [Source!]!
  sirene(siren: String!): JSON!
  inseeSeries(dataset: String!, series: [String!]!, sinceYear: Int): JSON!
  dataGouvSearch(query: String!, pageSize: Int = 5): JSON!
  communes(department: String!): JSON!
  euCofogCompare(year: Int!, countries: [String!]!, level: Int = 1): [EUCountryCofog!]!
  euFiscalPath(country: String!, years: [Int!]!): FiscalPath!

  # MVP+: LEGO Builder
  legoPieces(year: Int!, scope: ScopeEnum = S13): [LegoPiece!]!
  legoBaseline(year: Int!, scope: ScopeEnum = S13): LegoBaseline!
  builderMasses(year: Int!, lens: LensEnum = ADMIN): [BuilderMassType!]!
  legoDistance(year: Int!, dsl: String!, scope: ScopeEnum = S13): Distance!
  shareCard(scenarioId: ID!): ShareSummary!
  scenarioCompare(a: ID!, b: ID): ScenarioCompareResult!
  policyLevers(family: PolicyFamilyEnum, search: String): [PolicyLeverType!]!
  massLabels: [MassLabelType!]!
  missionLabels: [MissionLabelType!]!
  popularIntents(limit: Int = 6): [IntentType!]!
  suggestLevers(massId: String!, limit: Int = 5): [PolicyLeverType!]!

  # Runtime additions for permalinks and comparisons
  scenario(id: ID!): RunScenarioPayload!
}

type Mutation {
  runScenario(input: RunScenarioInput!): RunScenarioPayload!
  saveScenario(id: ID!, title: String, description: String): Boolean!
  deleteScenario(id: ID!): Boolean!
}
